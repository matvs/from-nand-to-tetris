// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
	//DMux(in=true,sel=instruction[15],a=instructionA, b=instructionC);
	Mux16(a[0..15]=false,b=instruction,sel=instruction[15],out[12]=a, out[6]=c6,out[7]=c5,out[8]=c4,out[9]=c3,out[10]=c2,out[11]=c1,out[3]=d3,out[3]=writeM,out[4]=d2,out[5]=d1,out[0]=j3,out[1]=j2,out[2]=j1);
	
	Mux(a=true,b=d1,sel=instruction[15],out=loadA);
	Mux16(a=instruction,b=outAlu,sel=instruction[15],out=registerAIn);
	ARegister(in=registerAIn,load=loadA, out=registerAOut, out[0..14]=addressM);
	Mux16(a=registerAOut,b=inM,sel=a,out=y);
	
	DRegister(in=outAlu,load=d2, out=x);
	
	ALU(x=x, y=y, zx=c1,nx=c2,zy=c3,ny=c4,f=c5,no=c6, out=outAlu, out=outM, zr=zr,ng=ng);
	
	Mux(a=j3,b=j1,sel=ng,out=loadPC1);	
	Mux(a=loadPC1,b=j2,sel=zr,out=loadPC);

	PC(in=registerAOut,reset=reset,load=loadPC,inc=true,out[0..14]=pc);
}